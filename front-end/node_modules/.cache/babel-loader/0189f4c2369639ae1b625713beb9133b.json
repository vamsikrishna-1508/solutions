{"ast":null,"code":"import { useReducer, useCallback } from \"react\";\nimport { getHomeboardStudents } from \"api/get-homeboard-students\";\nimport { getActivities } from \"api/get-activities\";\nimport { saveActiveRoll } from \"api/save-active-roll\";\nexport function useApi({\n  url,\n  initialLoadState = \"loading\"\n}) {\n  const [state, dispatch] = useReducer(stateReducer(), {\n    data: undefined,\n    loadState: initialLoadState,\n    error: undefined\n  });\n  const callApi = useCallback(async params => {\n    dispatch({\n      type: \"loading\"\n    });\n\n    function process(result) {\n      if (result.success) {\n        dispatch({\n          type: \"success\",\n          result: result\n        });\n      } else if (result.error) {\n        dispatch({\n          type: \"error\",\n          error: result.error\n        });\n      }\n    }\n\n    switch (url) {\n      case \"get-homeboard-students\":\n        return getHomeboardStudents().then(process);\n\n      case \"get-activities\":\n        return getActivities().then(process);\n\n      case \"save-roll\":\n        return saveActiveRoll(params).then(process);\n    }\n  }, [url]);\n  return [callApi, state.data, state.loadState, state.error];\n}\n/* use-api state reducer */\n\nfunction stateReducer() {\n  return (state, action) => {\n    switch (action.type) {\n      case \"loading\":\n        return { ...state,\n          loadState: \"loading\",\n          error: undefined\n        };\n\n      case \"success\":\n        return { ...state,\n          loadState: \"loaded\",\n          error: undefined,\n          data: action.result\n        };\n\n      case \"error\":\n        return { ...state,\n          loadState: \"error\",\n          error: action.error\n        };\n    }\n  };\n}","map":{"version":3,"sources":["/home/vamsi/Documents/Orah/solutions/front-end/src/shared/hooks/use-api.tsx"],"names":["useReducer","useCallback","getHomeboardStudents","getActivities","saveActiveRoll","useApi","url","initialLoadState","state","dispatch","stateReducer","data","undefined","loadState","error","callApi","params","type","process","result","success","then","action"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,OAAxC;AAGA,SAASC,oBAAT,QAAqC,4BAArC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,cAAT,QAA+B,sBAA/B;AAMA,OAAO,SAASC,MAAT,CAAiC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,gBAAgB,GAAG;AAA1B,CAAjC,EAAiF;AACtF,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,UAAU,CAACU,YAAY,EAAb,EAA6B;AAAEC,IAAAA,IAAI,EAAEC,SAAR;AAAmBC,IAAAA,SAAS,EAAEN,gBAA9B;AAAgDO,IAAAA,KAAK,EAAEF;AAAvD,GAA7B,CAApC;AACA,QAAMG,OAAO,GAAGd,WAAW,CACzB,MAAOe,MAAP,IAA2B;AACzBP,IAAAA,QAAQ,CAAC;AAAEQ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AAEA,aAASC,OAAT,CAAiBC,MAAjB,EAAkD;AAChD,UAAIA,MAAM,CAACC,OAAX,EAAoB;AAClBX,QAAAA,QAAQ,CAAC;AAAEQ,UAAAA,IAAI,EAAE,SAAR;AAAmBE,UAAAA,MAAM,EAAEA;AAA3B,SAAD,CAAR;AACD,OAFD,MAEO,IAAIA,MAAM,CAACL,KAAX,EAAkB;AACvBL,QAAAA,QAAQ,CAAC;AAAEQ,UAAAA,IAAI,EAAE,OAAR;AAAiBH,UAAAA,KAAK,EAAEK,MAAM,CAACL;AAA/B,SAAD,CAAR;AACD;AACF;;AAED,YAAQR,GAAR;AACE,WAAK,wBAAL;AACE,eAAOJ,oBAAoB,GAAGmB,IAAvB,CAA4BH,OAA5B,CAAP;;AACF,WAAK,gBAAL;AACE,eAAOf,aAAa,GAAGkB,IAAhB,CAAqBH,OAArB,CAAP;;AACF,WAAK,WAAL;AACE,eAAOd,cAAc,CAACY,MAAD,CAAd,CAAoCK,IAApC,CAAyCH,OAAzC,CAAP;AANJ;AAQD,GApBwB,EAqBzB,CAACZ,GAAD,CArByB,CAA3B;AAwBA,SAAO,CAACS,OAAD,EAAUP,KAAK,CAACG,IAAhB,EAAsBH,KAAK,CAACK,SAA5B,EAAuCL,KAAK,CAACM,KAA7C,CAAP;AACD;AAED;;AACA,SAASJ,YAAT,GAA2B;AACzB,SAAO,CAACF,KAAD,EAAyBc,MAAzB,KAAuE;AAC5E,YAAQA,MAAM,CAACL,IAAf;AACE,WAAK,SAAL;AACE,eAAO,EAAE,GAAGT,KAAL;AAAYK,UAAAA,SAAS,EAAE,SAAvB;AAAkCC,UAAAA,KAAK,EAAEF;AAAzC,SAAP;;AACF,WAAK,SAAL;AACE,eAAO,EAAE,GAAGJ,KAAL;AAAYK,UAAAA,SAAS,EAAE,QAAvB;AAAiCC,UAAAA,KAAK,EAAEF,SAAxC;AAAmDD,UAAAA,IAAI,EAAEW,MAAM,CAACH;AAAhE,SAAP;;AACF,WAAK,OAAL;AACE,eAAO,EAAE,GAAGX,KAAL;AAAYK,UAAAA,SAAS,EAAE,OAAvB;AAAgCC,UAAAA,KAAK,EAAEQ,MAAM,CAACR;AAA9C,SAAP;AANJ;AAQD,GATD;AAUD","sourcesContent":["import { useReducer, useCallback } from \"react\"\nimport { ApiResponse, ResponseError } from \"shared/interfaces/http.interface\"\nimport { RollInput } from \"shared/models/roll\"\nimport { getHomeboardStudents } from \"api/get-homeboard-students\"\nimport { getActivities } from \"api/get-activities\"\nimport { saveActiveRoll } from \"api/save-active-roll\"\n\ninterface Options {\n  url: Endpoint\n  initialLoadState?: LoadState\n}\nexport function useApi<ReturnType = {}>({ url, initialLoadState = \"loading\" }: Options) {\n  const [state, dispatch] = useReducer(stateReducer<ReturnType>(), { data: undefined, loadState: initialLoadState, error: undefined })\n  const callApi = useCallback(\n    async (params?: object) => {\n      dispatch({ type: \"loading\" })\n\n      function process(result: ApiResponse<ReturnType>) {\n        if (result.success) {\n          dispatch({ type: \"success\", result: result })\n        } else if (result.error) {\n          dispatch({ type: \"error\", error: result.error })\n        }\n      }\n\n      switch (url) {\n        case \"get-homeboard-students\":\n          return getHomeboardStudents().then(process)\n        case \"get-activities\":\n          return getActivities().then(process)\n        case \"save-roll\":\n          return saveActiveRoll(params as RollInput).then(process)\n      }\n    },\n    [url]\n  )\n\n  return [callApi, state.data, state.loadState, state.error] as const\n}\n\n/* use-api state reducer */\nfunction stateReducer<T>() {\n  return (state: ReducerState<T>, action: ReducerAction<T>): ReducerState<T> => {\n    switch (action.type) {\n      case \"loading\":\n        return { ...state, loadState: \"loading\", error: undefined }\n      case \"success\":\n        return { ...state, loadState: \"loaded\", error: undefined, data: action.result }\n      case \"error\":\n        return { ...state, loadState: \"error\", error: action.error }\n    }\n  }\n}\ninterface ReducerState<T> {\n  data: T | undefined\n  loadState: LoadState\n  error: ResponseError | undefined\n}\ntype ReducerAction<T> = { type: \"success\"; result: T } | { type: \"error\"; error: ResponseError } | { type: \"loading\" }\n\n/* use-api options interfaces */\nexport type Endpoint = \"get-homeboard-students\" | \"save-roll\" | \"get-activities\"\nexport type LoadState = \"unloaded\" | \"loading\" | \"loaded\" | \"error\"\n"]},"metadata":{},"sourceType":"module"}