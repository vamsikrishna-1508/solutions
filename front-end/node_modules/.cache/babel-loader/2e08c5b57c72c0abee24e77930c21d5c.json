{"ast":null,"code":"import { httpMock } from \"shared/helpers/http-mock\";\nimport { get, LocalStorageKey } from \"shared/helpers/local-storage\";\nexport async function getActivities() {\n  try {\n    const rolls = get(LocalStorageKey.rolls) || [];\n    await httpMock({\n      randomFailure: true\n    });\n    return {\n      success: true,\n      activity: buildActivities(rolls)\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: {}\n    };\n  }\n}\n\nfunction buildActivities(inputs) {\n  return inputs.map(item => ({\n    type: \"roll\",\n    entity: item,\n    date: item.completed_at\n  }));\n}","map":{"version":3,"sources":["/home/vamsi/Documents/Orah/solutions/front-end/src/api/get-activities.ts"],"names":["httpMock","get","LocalStorageKey","getActivities","rolls","randomFailure","success","activity","buildActivities","error","inputs","map","item","type","entity","date","completed_at"],"mappings":"AAAA,SAASA,QAAT,QAAyB,0BAAzB;AACA,SAASC,GAAT,EAAcC,eAAd,QAAqC,8BAArC;AAKA,OAAO,eAAeC,aAAf,GAA+E;AACpF,MAAI;AACF,UAAMC,KAAK,GAAGH,GAAG,CAASC,eAAe,CAACE,KAAzB,CAAH,IAAsC,EAApD;AAEA,UAAMJ,QAAQ,CAAC;AAAEK,MAAAA,aAAa,EAAE;AAAjB,KAAD,CAAd;AACA,WAAO;AACLC,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,QAAQ,EAAEC,eAAe,CAACJ,KAAD;AAFpB,KAAP;AAID,GARD,CAQE,OAAOK,KAAP,EAAc;AACd,WAAO;AACLH,MAAAA,OAAO,EAAE,KADJ;AAELG,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID;AACF;;AAED,SAASD,eAAT,CAAyBE,MAAzB,EAAqD;AACnD,SAAOA,MAAM,CAACC,GAAP,CAAYC,IAAD,KAAW;AAC3BC,IAAAA,IAAI,EAAE,MADqB;AAE3BC,IAAAA,MAAM,EAAEF,IAFmB;AAG3BG,IAAAA,IAAI,EAAEH,IAAI,CAACI;AAHgB,GAAX,CAAX,CAAP;AAKD","sourcesContent":["import { httpMock } from \"shared/helpers/http-mock\"\nimport { get, LocalStorageKey } from \"shared/helpers/local-storage\"\nimport { ApiResponse } from \"shared/interfaces/http.interface\"\nimport { Activity } from \"shared/models/activity\"\nimport { Roll } from \"shared/models/roll\"\n\nexport async function getActivities(): Promise<ApiResponse<{ activity: Activity[] }>> {\n  try {\n    const rolls = get<Roll[]>(LocalStorageKey.rolls) || []\n\n    await httpMock({ randomFailure: true })\n    return {\n      success: true,\n      activity: buildActivities(rolls),\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: {},\n    }\n  }\n}\n\nfunction buildActivities(inputs: Roll[]): Activity[] {\n  return inputs.map((item) => ({\n    type: \"roll\",\n    entity: item,\n    date: item.completed_at,\n  }))\n}\n"]},"metadata":{},"sourceType":"module"}