{"ast":null,"code":"import { httpMock } from \"shared/helpers/http-mock\";\nimport { get, add, LocalStorageKey } from \"shared/helpers/local-storage\";\nexport async function saveActiveRoll(roll) {\n  try {\n    const rollsInStorage = get(LocalStorageKey.rolls);\n    const newRollId = rollsInStorage !== undefined ? rollsInStorage[rollsInStorage.length - 1].id + 1 : 1;\n    const rollsToSave = rollsInStorage !== undefined ? [...rollsInStorage, createRoll(newRollId, roll)] : [createRoll(newRollId, roll)];\n    add(LocalStorageKey.rolls, rollsToSave);\n    await httpMock({\n      randomFailure: true\n    });\n    return {\n      success: true\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: {}\n    };\n  }\n}\n\nfunction createRoll(id, input) {\n  return {\n    id,\n    name: `Roll ${id}`,\n    student_roll_states: input.student_roll_states,\n    completed_at: new Date()\n  };\n}","map":{"version":3,"sources":["/home/vamsi/Documents/Orah/solutions/front-end/src/api/save-active-roll.ts"],"names":["httpMock","get","add","LocalStorageKey","saveActiveRoll","roll","rollsInStorage","rolls","newRollId","undefined","length","id","rollsToSave","createRoll","randomFailure","success","error","input","name","student_roll_states","completed_at","Date"],"mappings":"AAAA,SAASA,QAAT,QAAyB,0BAAzB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,eAAnB,QAA0C,8BAA1C;AAIA,OAAO,eAAeC,cAAf,CAA8BC,IAA9B,EAAyE;AAC9E,MAAI;AACF,UAAMC,cAAc,GAAGL,GAAG,CAASE,eAAe,CAACI,KAAzB,CAA1B;AACA,UAAMC,SAAS,GAAGF,cAAc,KAAKG,SAAnB,GAA+BH,cAAc,CAACA,cAAc,CAACI,MAAf,GAAwB,CAAzB,CAAd,CAA0CC,EAA1C,GAA+C,CAA9E,GAAkF,CAApG;AACA,UAAMC,WAAW,GAAGN,cAAc,KAAKG,SAAnB,GAA+B,CAAC,GAAGH,cAAJ,EAAoBO,UAAU,CAACL,SAAD,EAAYH,IAAZ,CAA9B,CAA/B,GAAkF,CAACQ,UAAU,CAACL,SAAD,EAAYH,IAAZ,CAAX,CAAtG;AACAH,IAAAA,GAAG,CAACC,eAAe,CAACI,KAAjB,EAAwBK,WAAxB,CAAH;AAEA,UAAMZ,QAAQ,CAAC;AAAEc,MAAAA,aAAa,EAAE;AAAjB,KAAD,CAAd;AACA,WAAO;AACLC,MAAAA,OAAO,EAAE;AADJ,KAAP;AAGD,GAVD,CAUE,OAAOC,KAAP,EAAc;AACd,WAAO;AACLD,MAAAA,OAAO,EAAE,KADJ;AAELC,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID;AACF;;AAED,SAASH,UAAT,CAAoBF,EAApB,EAAgCM,KAAhC,EAAkD;AAChD,SAAO;AACLN,IAAAA,EADK;AAELO,IAAAA,IAAI,EAAG,QAAOP,EAAG,EAFZ;AAGLQ,IAAAA,mBAAmB,EAAEF,KAAK,CAACE,mBAHtB;AAILC,IAAAA,YAAY,EAAE,IAAIC,IAAJ;AAJT,GAAP;AAMD","sourcesContent":["import { httpMock } from \"shared/helpers/http-mock\"\nimport { get, add, LocalStorageKey } from \"shared/helpers/local-storage\"\nimport { ApiResponse } from \"shared/interfaces/http.interface\"\nimport { Roll, RollInput } from \"shared/models/roll\"\n\nexport async function saveActiveRoll(roll: RollInput): Promise<ApiResponse<{}>> {\n  try {\n    const rollsInStorage = get<Roll[]>(LocalStorageKey.rolls)\n    const newRollId = rollsInStorage !== undefined ? rollsInStorage[rollsInStorage.length - 1].id + 1 : 1\n    const rollsToSave = rollsInStorage !== undefined ? [...rollsInStorage, createRoll(newRollId, roll)] : [createRoll(newRollId, roll)]\n    add(LocalStorageKey.rolls, rollsToSave)\n\n    await httpMock({ randomFailure: true })\n    return {\n      success: true,\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: {},\n    }\n  }\n}\n\nfunction createRoll(id: number, input: RollInput) {\n  return {\n    id,\n    name: `Roll ${id}`,\n    student_roll_states: input.student_roll_states,\n    completed_at: new Date(),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}